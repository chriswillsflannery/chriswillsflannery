'use client'
import { useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import Prism from "prismjs";
import "prismjs/components/prism-typescript";
import "prismjs/components/prism-jsx";
import "prismjs/components/prism-tsx";
import { CodeBlock } from "@/components/CodeBlock";
import useWindowSize from "@/hooks/useWindowSize";
import { HL } from "@/components/HorizontalLine";

const parentChild = `
// create a parent object
const myPerson = {
  arms: 2,
  legs: 2,
};

// create a child object that links to parent object
const chris = Object.create(myPerson);
`;

const chrisHands = `
// create a parent object
const myPerson = {
  arms: 2,
  legs: 2,
};

// create a child object that links to parent object
const chris = Object.create(myPerson);
console.log(chris.hands);
// undefined
`;

const chrisHasOwnProperty = `
// create a parent object
const myPerson = {
  arms: 2,
  legs: 2,
};

// create a child object that links to parent object
const chris = Object.create(myPerson);
console.log(chris.hasOwnProperty('arms'));
// false
`;

const forLoop = `
for (let key in chris) {
  console.log(key);
}
// arms
// legs
`;

const forLoopCombine = `
for (let key in chris) {
  console.log(key, chris.hasOwnProperty(key));
}
// arms false
// legs false
`;

const propWithConsoleLog = `
const chris = Object.create(myPerson);
chris.hands = 2;
console.log(chris);
// { hands: 2 }
`;

const propWithDelete = `
const chris = Object.create(myPerson);
chris.hands = 2;
console.log(chris);
// { hands: 2 }
delete chris.hands;
console.log(chris);
// {}
`;

const attemptDeleteOnPrototype = `
const chris = Object.create(myPerson);
chris.hands = 2;
console.log(chris);
// { hands: 2 }
delete chris.hands;
console.log(chris);
// {}
delete chris.arms;
console.log(chris.arms);
// 2
`;

const Manipulacion = () => {
    const size = useWindowSize();
  
    useEffect(() => {
      const highlight = async () => {
        await Prism.highlightAll();
      };
      highlight();
    }, [size]);
  
    return (
      <div>
        <Head>
          <title>ChrisWF.</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
  
        <main>
          <h1>Object-Oriented Programación en JS: 3. Manipulación de Datos</h1>
          <article style={{ maxWidth: "600px", lineHeight: "24px" }}>
            <h4>
              Explicando la reflexión, enumeración y supresión - 3 temas criticales de
              trabajar con datos en objetos.
            </h4>
            <p>
              Como ya hemos visto en el artículo anterior de OOP, podemos usar el
              método Object.create() para crear un nuevo objeto que enlaza a otro
              objeto, y cuando tenemos esta relación padre-hijo, el objeto padre se
              llama <b>Prototipo</b> del hijo.
            </p>
            <p>
              En el siguiente ejemplo, <b>myPerson</b> se consideraría el Prototipo de{" "}
              <b>chris.</b>
            </p>
            <CodeBlock code={parentChild} />
            {/* ... continue replacing each myLang.oop3[n] with its corresponding JSX ... */}
            <p>
              Cualquieras propiedades que existen en objetos por defecto, como{" "}
              <b>Object.hasOwnProperty</b> o <b>Array.push</b>, se consideran
              propiedades no-configurables. Existen por defector - están ahí
              nativamente - y no las pueden eliminarse.
            </p>
          </article>
          <HL />
        </main>
      </div>
    );
  };
  
  export default Manipulacion;