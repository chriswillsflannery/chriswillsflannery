import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useEffect } from "react";
import Prism from "prismjs";
import "prismjs/components/prism-typescript";
import "prismjs/components/prism-jsx";
import "prismjs/components/prism-tsx";

import styles from "@/styles/Home.module.css";
import { CodeBlock, HL } from "src/components";
import forEach1 from "@/public/javascriptForEach/forEach1.jpg";
import forEach2 from "@/public/javascriptForEach/forEach2.jpg";

const link = { color: "seagreen" };

const array = `
const misMascotas = ['gato', 'perro', 'murcielago'];
misMascotas.forEach((mascota) => console.log(mascota));
`;

const defineSecondParam = `
const misMascotas = ['gato', 'perro', 'murcielago'];
misMascotas.forEach((mascota, idx) => {
  console.log(mascota + ' ' + idx));
}
`;

const JavaScriptQueEs: NextPage = () => {
  useEffect(() => {
    const highlight = async () => {
      await Prism.highlightAll();
    };
    highlight();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>ChrisWF.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.articleMain}>
        <h1>{`JavaScript: forEach()`}</h1>
        <HL />

        <article style={{ maxWidth: "600px", lineHeight: "24px" }}>
          <h4>Loops</h4>
          <p>
            Ahora que sabemos{" "}
            <a style={link} href="./javascriptLoops">
              cómo funcionan los loops
            </a>{" "}
            en JavaScript, podemos ver uno de los{" "}
            <a style={link} href="./javascriptArrayMethods">
              array métodos
            </a>{" "}
            más fundamentales - <b>forEach.</b> Al igual que los otros métodos
            de array que ya hemos visto, <b>forEach</b> existe por defecto en
            cada array que creamos. Vamos a ver cómo funciona:
          </p>
          <CodeBlock code={array} lang="javascript" />
          <p>
            ¿Qué piensas va a suceder cuando ejecutemos este còdigo? Veamos con
            más detalle qué está pasando aquí:
          </p>
          <Image
            src={forEach1}
            alt="Diagramming execution of forEach method"
            width={550}
            height={300}
          />
          <p>
            Primero declaramos una variable <b>misMascotas</b> en la memoria
            global y asignamos su valor como un <i>array</i> de <i>strings</i>.
            Entonces <i>llamamos</i> el método <b>forEach</b> que existe de
            forma nativa como una parte de nuestro array. ¿Qué hace{" "}
            <b>forEach</b>? forEach es un loop, lo mismo que el <b>for loop</b>{" "}
            que ya hemos visto. Tú puedes pensar en forEach muy similar a un for
            loop.
          </p>
          <p>
            Cuando <i>llamamos</i> <b>forEach</b>, hacemos un loop sobre cada
            elemento del array. La llamada a forEach por defecto contiene algo
            llamado una función <i>callback.</i> Esta significa que denro de la
            llamada a <b>forEach</b> existe de forma nativa una función - y esta
            función se ejecuta en cada elemento del array. Sólo necesitamos
            decidir unas cosas:
          </p>
          <ul>
            <li>
              <b>Qué será el nombre del parámetro</b> de la <i>callback</i> -
              aquí hemos decidido a llamarlo <b>mascota</b>. Recuerda que dije
              que esta función se ejecuta en cada elemento del array. Este
              parámetro representa el elemento en lo que actualmente estamos
              ejecutando la callback. Ya que estamos ejecutando <b>forEach</b>{" "}
              en un array de mascotas, he decidido que ese elemento será llamado
              mascota.
            </li>
            <li>
              <b>
                Qué hace la función. Aquí he decidido que cada vez ejecutamos la
                callback en un elemento del array, vamos a imprimir ese elemento
                al console.
              </b>
            </li>
          </ul>
        </article>
        <HL />

        <article style={{ maxWidth: "600px", lineHeight: "24px" }}>
          <h4>Acceso al índice</h4>
          <p>
            Piensa en cuando hablamos de los <i>for loops</i>, y{" "}
            <a style={link} href="./javascriptLoops">
              cómo accedimos al indice
            </a>{" "}
            por usar la variable <b>i.</b> En el for loop, definimos una
            variable <b>i</b> que representa el índice actual sobre que estamos
            iterando. Cómo podemos acceder el índice con <b>forEach?</b> Pues la
            función callback dentro de forEach nos da una manera, por definir el
            segundo parámetro:
          </p>
          <CodeBlock code={defineSecondParam} lang="javascript" />
          <p>Vamos a ver cómo lo parece, con un diagrama:</p>
          <Image
            src={forEach2}
            alt="Diagramming execution of forEach method with index"
            width={550}
            height={300}
          />
          <p>
            Aquí podemos ver que básicamente <b>forEach</b> funciona de la misma
            manera que un <b>for loop.</b> Bajo el capó, JavaScript mantiene un
            registro de la posición del índice en cada iteración del loop. De
            esta manera, si lo necesitamos, podemos acceder no sólo el elemento
            en si, sino también su posición en el array por su índice. Aquí he
            decidido llamarlo <b>idx</b> pero puedes llamarlo lo que quieras.
          </p>
        </article>
        <HL />
      </main>

      <footer className={styles.footer}>
        <p>
          <Link href="../../">Home</Link>
        </p>
      </footer>
    </div>
  );
};

export default JavaScriptQueEs;
