import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link';

import styles from '../../styles/Home.module.css';

const link = { color: 'darkSlateBlue' };

const DestructuredVariable: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>ChrisWF.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.articleMain}>
        <h1>{`Destructured variable from array (JS)`}</h1>

        <div>
          <p>
            Quick hack for JavaScript cracks
          </p>
        </div>

        <article>
          <h4>Grab the first element of an array.</h4>
          <p>Say we create an array of variables, something like:</p>
          <code>{`const theboys = ['butcher', 'hughie', 'soldier boy'];`}</code>
          <p>Then we want to grab the first element of the array (if it exists):</p>
          <code>{`const first = theboys[0];`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// butcher`}</code>
          <p>What if the original array was empty?</p>
          <code>{`const vought = [];`}</code>
          <br />
          <code>{`const first = vought[0];`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// undefined`}</code>
        </article>

        <article>
          <h4>We can do the same thing with destructuring and the rest parameter:</h4>
          <code>{`const theboys = ['butcher', 'hughie', 'soldier boy'];`}</code>
          <br />
          <code>{`const [first] = theboys;`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// butcher`}</code>
          <p>Again, what if the original array was empty?</p>
          <code>{`const vought = [];`}</code>
          <br />
          <code>{`const [first] = vought;`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// undefined`}</code>
          <p>Same end result.</p>
          <p>We can continue by accessing the &rdquo;rest&rdquo; of the elements of the array using the rest parameter:</p>
          <code>{`const [first, ...rest] = theboys;`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// butcher`}</code>
          <br />
          <code>{`console.log(rest);`}</code>
          <br />
          <code>{`// [hughie, soldier boy]`}</code>
        </article>

        <article>
          <h4>Mike North uses this in a <a style={link} href='https://frontendmasters.com/courses/fullstack-typescript/data-from-the-database/'>GraphQL Tutorial</a>, where he does something like this:</h4>
          <code>{`const [firstUser] = db.getAllUsers();`}</code>
          <br />
          <code>{`if (!firstUser) throw new Error();`}</code>
          <br />
          <code>{`return firstUser;`}</code>
        </article>

        <article>
          <h4>An interesting side note is that this will work with strings as well:</h4>
          <code>{`const myfriend = 'jimmy';`}</code>
          <br />
          <code>{`const [first, ...rest] = myfriend;`}</code>
          <br />
          <code>{`console.log(first);`}</code>
          <br />
          <code>{`// 'j'`}</code>
          <br />
          <code>{`console.log(rest);`}</code>
          <br />
          <code>{`// ['i','m','m','y']`}</code>
          <br />
          
        </article>
      </main>

      <footer className={styles.footer}>
        <p>
          <Link href="../">
            Home
          </Link>
        </p>
      </footer>
    </div>
  )
}

export default DestructuredVariable
