import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link';
import Image from 'next/image';

import enumAndType from '../../public/discriminatedUnions/enumAndType.jpg';
import functionUsingGenerics from '../../public/discriminatedUnions/functionUsingGenerics.jpg';
import hoverOnPayloadGeneric from '../../public/discriminatedUnions/hoverOnPayloadGeneric.jpg';
import singleUnionType from '../../public/discriminatedUnions/singleUnionType.jpg';
import singleUnionTypeUsage from '../../public/discriminatedUnions/singleUnionTypeUsage.jpg';
import hoverOnPayloadUnion from '../../public/discriminatedUnions/hoverOnPayloadUnion.jpg';

import styles from '../../styles/Home.module.css';

const DiscriminatedUnions: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>ChrisWF.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.articleMain}>
        <h1>{`Discriminated Unions in Typescript`}</h1>

        <div>
          <p>Getting more out of your TS types</p>
        </div>

        <article>
          <h4>Take the below as a starting point.</h4>
          <p>We have an enum and an interface:</p>
          <Image
            src={enumAndType}
            alt="Enum and type"
            width={550}
            height={220}
            priority
          />
          <p>We can assume &rsquo;Items&rsquo; might be something like an array of strings.</p>
          <p>We then have a function which uses these types:</p>
          <Image
            src={functionUsingGenerics}
            alt="Function using generics"
            width={550}
            height={220}
          />
          <p>Here we are using the generic T to describe the relationship between the &rsquo;type&rsquo; and &rsquo;payload&rsquo; in this function&rsquo;s parameters, which are not static types.</p>
          <p>However, the issue is that when we hover on &rsquo;payload&rsquo;, we see this:</p>
          <Image
            src={hoverOnPayloadGeneric}
            alt="Hover on payload and see generic"
            width={550}
            height={220}
          />
          <p>Unfortunately, the type of &rsquo;payload&rsquo; within the switch statement remains as <code>CollectionPayloads[T].</code></p>
          <p>We would hope that TypeScript would know that &rsquo;T&rsquo; is now a specific value, in fact, one of several possibilities within CollectionPayloads.</p>
          <p>However, TS isn&rsquo;t smart enough to dig that deep - this is actually an intentionally designed feature of TS, limited for performance reasons.</p>
          <p>Additionally, we want TS to narrow the type based on the &rsquo;case&rsquo; within the switch statement.</p>
        </article>

        <article>
          <h4>How can we achieve this type narrowing within the switch statement?</h4>
          <p>We can combine the type and payload into a single type:</p>
          <Image
            src={singleUnionType}
            alt="Single union type"
            width={550}
            height={250}
          />
          <p>And reference it in the function like so:</p>
          <Image
            src={singleUnionTypeUsage}
            alt="Single union type usage in function"
            width={550}
            height={180}
          />
          <p>Now when we hover on &rsquo;payload&rsquo; we see that we get full type information:</p>
          <Image
            src={hoverOnPayloadUnion}
            alt="Hover on payload showing full type info"
            width={550}
            height={180}
          />
          <p>
            In short, in this example, TypeScript is able to perform type narrowing because of the <i>relationships</i>
            {' '}between various <i>combinations</i> of potential payloads.
          </p>
        </article>
      </main>

      <footer className={styles.footer}>
        <p>
          <Link href="../">
            Home
          </Link>
        </p>
      </footer>
    </div>
  )
}

export default DiscriminatedUnions
