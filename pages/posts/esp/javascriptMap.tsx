import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link';
import Image from 'next/image';
import { useEffect } from 'react';
import Prism from 'prismjs';
import "prismjs/components/prism-typescript";
import "prismjs/components/prism-jsx";
import "prismjs/components/prism-tsx";

import styles from '@/styles/Home.module.css';
import { CodeBlock, HL } from '@/components';
import map1 from '@/public/javascriptMap/map1.jpg';
import map2 from '@/public/javascriptMap/map2.jpg';
import map3 from '@/public/javascriptMap/map3.jpg';
import map4 from '@/public/javascriptMap/map4.jpg';
import map5 from '@/public/javascriptMap/map5.jpg';

const link = { color: 'seagreen' };

const array = `
const nums = [25, 100, 10];
`;

const mas2 = `
const nums = [27, 102, 12];
`;

const simpleEx = `
const nums = [25, 100, 10];
const newNums = nums.map((num) => num + 2);
`;

const intenta = `
const nums = [1,2,3];
const testArray1 = nums.forEach((num) => num + 2);
const testArray2 = nums.map((num) => num + 2);

console.log(testArray1);
// undefined
console.log(testArray2);
// [3,4,5]
`;

const index = `
const nums = [2,4,6];
const idxs = nums.map((num, idx) => num + idx);
console.log(idxs);
// [2,5,8];
`;

const JavaScriptQueEs: NextPage = () => {
  useEffect(() => {
    const highlight = async () => {
      await Prism.highlightAll();
    }
    highlight();
  }, []);
  
  return (
    <div className={styles.container}>
      <Head>
        <title>ChrisWF.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.articleMain}>
        <h1>{`JavaScript: map()`}</h1>
        <HL />

        <article style={{ maxWidth: '600px', lineHeight: '24px'}}>
          <h4>JavaScript array método: map</h4>
          <p>Uno de los array métodos de JavaScript más importantes para tener en tu arsenal es <b>map.</b> Este método es útil para transformar un array de elementos en un array de elementos diferentes. Para ser más preciso, cuando tenemos un array de elementos con <i>length</i> X, <b>map</b> va a transformar nuestro array en un array de elementos diferentes - pero el <i>length</i> todavía debe ser X. Por ejemplo, si tenemos un array de tres números:</p>
          <CodeBlock code={array} lang="javascript" />
          <p>Y cuando queremos generar un array con los valores del array original más 2:</p>
          <CodeBlock code={mas2} lang="javascript" />
          <p>Eso podemos hacer con <b>map:</b></p>
          <CodeBlock code={simpleEx} lang="javascript" />
          <p>Anteriormente vimos que <b>forEach</b> está muy similar a un <b>for loop</b> - simplemente es un loop que itera sobre los elementos del array. De forma similar, <b>map</b> también es un loop que itera sobre los elementos del array. Sin embargo, hay otra distinción a tener en cuenta: Mientras que <b>forEach</b> sólo es un loop, y no devuelve nada, <b>map</b> crea un nuevo array bajo del capó y lo devuelve. Es por esta razón que si intentas hacer:</p>
          <CodeBlock code={intenta} lang="javascript" />
          <p>Como puedes ver, <b>map</b> devuelve un nuevo array mientras <b>forEach</b> no tiene un elemento devuelto. Vamos a echar un vistazo a que está pasando bajo el capó para entender mejor:</p>
          <CodeBlock code={simpleEx} lang="javascript" />
          <Image
            src={map1}
            alt="Diagramming execution of map method"
            width={550}
            height={300}
          />
          <p>Primero declaramos una variable <b>nums</b> en la memoria global y asignamos un array de números como su valor. Entonces declaramos otra variable newNums en la memoria global y asignamos su valor como - ¿qué? Bueno, ya no sabemos hasta que ejecutamos el <b>map</b> método.</p>
          <Image
            src={map2}
            alt="Diagramming execution of map method"
            width={550}
            height={300}
          />
          <p>Entonces <b>map</b> empieza su ciclo: Regla #1: map crea un nuevo array (bajo el capó). Este array se crea implicitamente en la memoria local del ejecucción de <b>map.</b></p>
          <Image
            src={map3}
            alt="Diagramming execution of map method"
            width={550}
            height={300}
          />
          <p><b>map</b> Regla #2: empieza el loop. <b>map</b> es un loop que ejecuta una <i>función callback</i> sobre cada elemento del array. En qué elemento estamos ejecutando la callback? <b>25.</b> ¿Que hace la función callback? Añade 2 al elemento, y inserta el resultado en el nuevo array.</p>
          <Image
            src={map4}
            alt="Diagramming execution of map method"
            width={550}
            height={300}
          />
          <p>La función callback se ejecuta en cada elemento del array.</p>
          <Image
            src={map5}
            alt="Diagramming execution of map method"
            width={550}
            height={300}
          />
          <p><b>map</b> Regla # 3: <b>map</b> devuelve el array al lugar donde ejecutabamos <b>map - asignamos el valor a la variable <b>newNums.</b></b></p>
          <p>Igual que con <b>forEach,</b> con <b>map</b> podemos acceder el índice, si necesitamos, con el segundo parámetro:</p>
          <CodeBlock code={index} lang="javascript" />
        </article>
        <HL />
      </main>

      <footer className={styles.footer}>
        <p>
          <Link href="../../">
            Home
          </Link>
        </p>
      </footer>
    </div>
  )
}

export default JavaScriptQueEs
